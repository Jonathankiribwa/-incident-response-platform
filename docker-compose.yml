version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: incident_response_postgres
    environment:
      POSTGRES_DB: incident_response
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - incident_response_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: incident_response_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - incident_response_network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: incident_response_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - incident_response_network

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: incident_response_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - incident_response_network

  # Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: incident_response_kafka_ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - incident_response_network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: incident_response_backend
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: development
      PORT: 8000
      JWT_SECRET: your-jwt-secret-key-change-in-production
      DATABASE_URL: postgresql://postgres:password@postgres:5432/incident_response
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:29092
    depends_on:
      - postgres
      - redis
      - kafka
    # volumes:
    #   - ./backend:/app
    #   - /app/node_modules
    networks:
      - incident_response_network

  # ML Pipeline Service
  ml-pipeline:
    build:
      context: ./ml-pipeline
      dockerfile: Dockerfile.dev
    container_name: incident_response_ml_pipeline
    environment:
      MODEL_PATH: /app/models/alert_classifier.pkl
      KAFKA_BROKERS: kafka:29092
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://postgres:password@postgres:5432/incident_response
    depends_on:
      - kafka
      - redis
      - postgres
    volumes:
      - ./ml-pipeline:/app
      - ml_models:/app/models
    networks:
      - incident_response_network

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: incident_response_frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - incident_response_network

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  ml_models:

networks:
  incident_response_network:
    driver: bridge 